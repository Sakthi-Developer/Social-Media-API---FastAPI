[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "psycopg2,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2.",
        "description": "psycopg2.",
        "detail": "psycopg2.",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "class Post(BaseModel):\n    title: str\n    content: str\n    published: bool\n    rating: float\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello from FastAPI root directory\"}\n@app.get(\"/posts\")\nasync def get_posts():",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def create_posts(post:Post):\n    cursor.execute(\"\"\"INSERT INTO posts (title,content,published,rating) VALUES(%s,%s,%s,%s) RETURNING * \"\"\",\n                   (post.title,post.content,post.published,post.rating))\n    new_crted_post = cursor.fetchone()\n    connection.commit()\n    return {\"data\": new_crted_post}\n@app.get(\"/posts/{id}\")\ndef get_post(id: int, responce: Response):\n    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id),))\n    fecth_post = cursor.fetchone()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_post(id: int, responce: Response):\n    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id),))\n    fecth_post = cursor.fetchone()\n    # post = find_post(int(id))\n    if not fecth_post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                              detail=f\"Post with {id} not found\")\n    return {\"text\": fecth_post}\n@app.delete(\"/posts/{id}\")\ndef delete_post(id: int):",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def delete_post(id: int):\n    cursor.execute(\"\"\"DELETE FROM posts WHERE id = %s \"\"\",((id),))\n    connection.commit()\n    if cursor.rowcount == 0:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail=f\"ID {id} dose not exist\")\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n@app.put('/posts/{id}')\ndef patch_update(id: int, post: Post):\n    cursor.execute(\"\"\"UPDATE posts SET title=%s, content=%s, published=%s, rating=%s  WHERE id = %s RETURNING *\"\"\",\n                   (post.title, post.content, post.published, post.rating, str(id)),)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "patch_update",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def patch_update(id: int, post: Post):\n    cursor.execute(\"\"\"UPDATE posts SET title=%s, content=%s, published=%s, rating=%s  WHERE id = %s RETURNING *\"\"\",\n                   (post.title, post.content, post.published, post.rating, str(id)),)\n    updated_posts = cursor.fetchone()\n    connection.commit()\n    if not updated_posts:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                              detail=f\"Post with {id} not found\")\n    return {'data': updated_posts}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\nwhile True:\n    try:\n        connection = psycopg2.connect(host = 'localhost', database = 'fastapi', user = 'postgres', password = '197300',cursor_factory=psycopg2.extras.RealDictCursor)\n        cursor = connection.cursor()\n        print(\"Succesfully connected to the Database\")\n        break\n    except Exception as error:\n        print(\"Truble Connecting to the Database\")\n        print(error)",
        "detail": "app.main",
        "documentation": {}
    }
]